cmake_minimum_required(VERSION 3.5.0)
project(MAIN VERSION 0.1.0)

# 添加dirName下所有子目录
function(addAllDirectory dirName)
    file(GLOB SUB_DIR RELATIVE ${PROJECT_SOURCE_DIR} ${dirName}/*)
    foreach (DIR ${SUB_DIR})
        set(dirName ${PROJECT_SOURCE_DIR}/${DIR})
        if (IS_DIRECTORY ${dirName})
            add_subdirectory(${dirName})
        endif ()
    endforeach ()
endfunction()
# 获取parentDir下除exclude文件夹之外的所有cpp路径
function(getAllCpp path parentDir exclude)
    set(LOCAL_LIST)
    file(GLOB ALL_DIR RELATIVE ${parentDir} ${parentDir}/*)
    foreach(ITEM ${ALL_DIR})
        set(ITEM_DIR ${parentDir}/${ITEM})
        set(FIND_BOOL FALSE)
        foreach(dir ${exclude})
            if("${dir}" STREQUAL "${ITEM}")
                set(FIND_BOOL TRUE)
                break()
            endif()
        endforeach()
        if ("${FIND_BOOL}" STREQUAL "FALSE")
            if(EXISTS ${ITEM_DIR})
                file(GLOB ALL_FILE ${ITEM_DIR}/*.cpp)
                list(APPEND LOCAL_LIST ${ALL_FILE})
            endif()
        endif ()
    endforeach()
    set(path ${LOCAL_LIST} PARENT_SCOPE)
endfunction()

if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    add_definitions(-DUTIL_DEBUG)
endif ()

# 添加opencv引用
set(OpenGL_DIR ${PROJECT_SOURCE_DIR} CACHE PATH "" FORCE)
set(OpenCV_DIR  F:/opencv/build/x64/vc16/lib CACHE PATH "" FORCE)
set(UTILS_PATH ${PROJECT_SOURCE_DIR}/utils CACHE PATH "" FORCE)
set(UTILS_TEST_PATH ${PROJECT_SOURCE_DIR}/test CACHE PATH "" FORCE)
set(THIRD_PART ${PROJECT_SOURCE_DIR}/third_part CACHE PATH "" FORCE)
set(LIB_DIR ${PROJECT_SOURCE_DIR}/lib CACHE PATH "" FORCE)
set(LOG_FILE_PATH ON CACHE BOOL "choose OFF to disable" FORCE)
set(LOG_TIME ON CACHE BOOL "choose OFF to disable" FORCE)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Debug)

if (${LOG_TIME} STREQUAL "ON")
    add_definitions(-DLOG_TIME)
endif ()

if (${LOG_FILE_PATH} STREQUAL "ON")
    add_definitions(-DLOG_FILE_PATH)
endif ()
# find_package(OpenCV REQUIRED)

addAllDirectory(${UTILS_PATH})
add_subdirectory(${THIRD_PART}/zlib)
add_subdirectory(${THIRD_PART}/googletest)
add_subdirectory(ULGui)
add_executable(MAIN main.cpp)
add_executable(OpencvTest ${UTILS_TEST_PATH}/Opencv_test.cpp)

include_directories(${OpenCV_INCLUDE_DIRS})

#target_link_libraries(MAIN Matrix_static logger_static Util_static)
#target_link_libraries(MAIN Singleton_static)
#target_link_libraries(MAIN Reflex_static)
#target_link_libraries(MAIN JsonSerialize_static)
#target_link_libraries(MAIN Server_static)

target_link_libraries(OpencvTest ${OpenCV_LIBS})

enable_testing()

add_test(Opencv_Test OpencvTest)
